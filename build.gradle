plugins {
    id 'java'
    id 'checkstyle'
    id 'maven-publish'
    id 'com.diffplug.gradle.spotless' version '3.13.0'
    id 'org.shipkit.java' version '2.0.26'
    id 'at.zierler.yamlvalidator' version '1.5.0'
}

group 'org.junit-pioneer'
description = 'JUnit 5 Extension Pack'
sourceCompatibility = 1.8

ext {
    // assign empty user name and password, so Gradle does not fail due to
    // missing properties when eagerly configuring the Maven credentials
    mavenUserName = project.findProperty('mavenUserName') ?: ''
    mavenPassword = project.findProperty('mavenPassword') ?: ''
    isReleaseVersion = !version.endsWith('-SNAPSHOT')
    travisApiToken = project.findProperty('travisApiToken') ?: ''
}

repositories {
    mavenCentral()
    maven {
        name "MavenSnapshot"
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

dependencies {
    compile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.1.1'

    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.1.1'
    testCompile group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.1.1'

    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.5.2'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.2.1'
    testCompile group: 'com.google.jimfs', name: 'jimfs', version: '1.1'

    testRuntime group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.0'
    testRuntime group: 'org.apache.logging.log4j', name: 'log4j-jul', version: '2.11.0'
}

test {
    useJUnitPlatform()
    filter {
        includeTestsMatching "*Tests"
    }
    systemProperty 'java.util.logging.manager', 'org.apache.logging.log4j.jul.LogManager'
}

spotless {
    def headerFile = rootProject.file('.infra/spotless/eclipse-public-license-2.0.java')

    java {
        licenseHeaderFile headerFile, '(package|import) '
        importOrderFile rootProject.file('.infra/eclipse/junit-eclipse.importorder')
        eclipse().configFile('.infra/eclipse/junit-eclipse-formatter-settings.xml')

        trimTrailingWhitespace()
        endWithNewline()
    }

    format 'groovy', {
        target '**/*.groovy'
        indentWithTabs()
        trimTrailingWhitespace()
        endWithNewline()
        licenseHeaderFile headerFile, "package "

        replaceRegex 'class-level Javadoc indentation fix', /^\*/, ' *'
        replaceRegex 'nested Javadoc indentation fix', /\t\*/, '\t *'
    }
}

checkstyle {
    toolVersion = 6.11
    configFile = rootProject.file('.infra/checkstyle/checkstyle.xml')
    sourceSets = [ sourceSets.main ]
}

javadoc {
    // of all the javadoc checks (accessibility, html, missing, reference, syntax; see
    // https://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#BEJEFABE)
    // disable the warning for missing comments and tags because they spam the output
    // (it does often not make sense to comment every tag; e.g. the @return tag on annotations)
    options.addStringOption('Xdoclint:accessibility,html,syntax,reference', '-quiet')
}

// to find Javadoc errors early, let 'javadoc' task run during 'check'
check.dependsOn javadoc
// it should ran last, though
javadoc.shouldRunAfter test

yamlValidator {
    searchPaths = ['docs']
    searchRecursive = true
}

check.dependsOn validateYaml

// the manifest needs to declare the future module name
jar {
    manifest {
        attributes(
            'Automatic-Module-Name': 'org.junitpioneer'
        )
    }
}

tasks.withType(Jar) {
    from(projectDir) {
        include 'LICENSE.md'
        into 'META-INF'
    }
}

artifacts {
    archives javadocJar, sourcesJar
}

publishing {
    publications {
        complete(MavenPublication) {
            from components.java

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'JUnit Pioneer'
                description = 'JUnit 5 Extension Pack'
                url = 'https://github.com/junit-pioneer/junit-pioneer'
                scm {
                    url = 'https://github.com/junit-pioneer/junit-pioneer'
                    connection = 'scm:git:git://github.com:junit-pioneer/junit-pioneer.git'
                }
                issueManagement {
                    url = 'https://github.com/junit-pioneer/junit-pioneer/issues'
                    system = 'GitHub'
                }
                licenses {
                    license {
                        name = 'Eclipse Public License v2.0'
                        url = 'http://www.eclipse.org/legal/epl-v20.html'
                    }
                }
                organization {
                    name = 'JUnit Pioneer'
                    url = 'https://github.com/junit-pioneer'
                }
                developers {
                    developer {
                        id = 'nipa'
                        name = 'Nicolai Parlog'
                        email = 'nipa@codefx.org'
                        organization = 'CodeFX'
                        organizationUrl = 'http://codefx.org'
                        timezone = '1'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            def stagingRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotRepoUrl ='https://oss.sonatype.org/content/repositories/snapshots/'
            url = isReleaseVersion ? stagingRepoUrl : snapshotRepoUrl
            credentials {
                username mavenUserName
                password mavenPassword
            }
        }
    }
}

wrapper {
    gradleVersion = '4.8'
    jarFile = file('.infra/gradle/gradle-wrapper.jar')
}

task triggerSiteBuild(type: org.junitpioneer.gradle.TriggerTravisTask) {
    travisProject = 'junit-pioneer/junit-pioneer.github.io'
    branch = 'grandmaster'
    apiToken = travisApiToken
    message = 'Triggered by successful JUnit Pioneer build for %COMMIT'
}
